# -*- coding: utf-8 -*-
"""Readings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nZtS8lxJ4jh_ZAzRGxChso5C3q5xhhaE

## Name : Abhinn Verma
## NetID : av2683

## Calculating the Blood Pressure and Heart Rate
---
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import signal

vals = [0.244349 ,0.248015 ,0.678688 ,1.373291 ,1.798511 ,2.034098 ,2.263695 ,2.624989 ,3.009081 ,3.360093 ,3.791839 ,4.449249 ,5.575508 ,7.264763 ,8.624465 ,9.190143 ,8.957506 ,8.536131 ,8.308143 ,8.090884 ,8.056015 ,7.879794 ,7.815421 ,7.741750 ,7.692486 ,7.640005 ,7.554353 ,7.565260 ,7.478625 ,7.476837 ,7.424534 ,8.892686 ,10.569603 ,13.028384 ,15.790523 ,18.828125 ,21.744669 ,24.223658 ,25.826097 ,26.721865 ,26.753336 ,25.686890 ,25.018932 ,24.634748 ,24.312349 ,24.042875 ,23.824722 ,23.597361 ,23.429724 ,23.264858 ,23.095877 ,22.988678 ,22.843033 ,22.788498 ,26.091637 ,30.602934 ,35.672668 ,40.967171 ,45.499207 ,49.108212 ,52.234234 ,54.707680 ,56.682499 ,57.750916 ,56.975937 ,55.748283 ,55.106613 ,54.507496 ,54.051613 ,53.611816 ,53.228886 ,52.819675 ,52.523197 ,52.161457 ,51.933472 ,51.748306 ,51.530514 ,51.392918 ,51.183079 ,50.996307 ,56.338017 ,62.834324 ,69.672173 ,76.979851 ,83.916138 ,89.868576 ,93.569672 ,95.939667 ,97.076393 ,96.205566 ,94.879311 ,93.982109 ,93.215889 ,92.636978 ,92.187256 ,91.712326 ,91.198509 ,90.785088 ,90.524834 ,90.298714 ,89.957184 ,89.622177 ,89.370583 ,89.081352 ,88.809914 ,88.624123 ,88.401855 ,92.628036 ,102.046341 ,112.351311 ,122.026566 ,129.804092 ,135.215179 ,138.808975 ,140.417664 ,138.864685 ,137.065262 ,135.486526 ,134.155701 ,133.223450 ,132.419861 ,131.764420 ,131.173981 ,130.821442 ,130.452728 ,130.132477 ,129.832428 ,129.497238 ,129.179672 ,128.937820 ,128.752655 ,128.566956 ,128.455566 ,128.744247 ,129.110107 ,133.576965 ,142.358704 ,151.106903 ,159.422913 ,168.036560 ,174.693634 ,179.206802 ,180.988586 ,179.806549 ,178.092239 ,176.617935 ,175.393860 ,174.492630 ,173.911575 ,173.257401 ,172.778793 ,172.262634 ,171.873367 ,171.511017 ,171.132187 ,170.933517 ,170.629456 ,170.330917 ,170.121170 ,169.880661 ,169.582047 ,169.558624 ,169.499176 ,169.257324 ,169.031662 ,168.877701 ,168.691544 ,168.485291 ,168.305939 ,168.156189 ,167.939468 ,167.804993 ,167.779968 ,167.683929 ,167.522385 ,167.417419 ,167.329163 ,167.217148 ,167.110489 ,167.022507 ,166.896088 ,166.728546 ,166.664780 ,166.614014 ,166.490799 ,166.395309 ,166.268524 ,166.228210 ,166.329773 ,166.377808 ,166.339523 ,166.203812 ,166.088470 ,165.995041 ,165.979660 ,165.939514 ,165.751053 ,165.644928 ,165.641357 ,165.496780 ,165.472900 ,165.382339 ,165.316437 ,165.281570 ,165.101151 ,164.732880 ,164.308563 ,163.868759 ,163.465820 ,163.005539 ,162.509506 ,162.099747 ,161.679016 ,161.342407 ,161.010529 ,160.649475 ,160.113937 ,159.580536 ,159.099442 ,158.641495 ,158.187485 ,157.671524 ,157.181122 ,156.674988 ,156.218475 ,155.812393 ,155.263519 ,154.762833 ,154.270477 ,153.666260 ,153.067780 ,152.387833 ,151.736237 ,151.125595 ,150.518066 ,149.935944 ,149.274857 ,148.711502 ,148.123657 ,147.630585 ,147.261688 ,146.852829 ,146.343124 ,145.769928 ,145.229111 ,144.734604 ,144.110275 ,143.219864 ,142.269653 ,141.437897 ,140.631363 ,139.806931 ,139.072449 ,138.256439 ,137.444443 ,136.665436 ,135.882507 ,135.124954 ,134.489807 ,133.760437 ,133.077637 ,132.333405 ,131.683594 ,130.990158 ,130.346603 ,129.641983 ,128.915375 ,128.522888 ,128.060822 ,127.593849 ,126.885658 ,126.182198 ,125.568336 ,124.932213 ,124.225090 ,123.516624 ,122.888893 ,122.351120 ,121.857056 ,121.395088 ,120.853821 ,120.373970 ,119.894569 ,119.422859 ,118.957848 ,118.545959 ,118.125740 ,117.668785 ,117.200111 ,116.778198 ,116.320351 ,115.826462 ,115.422073 ,115.028061 ,114.752060 ,114.591576 ,114.397209 ,114.078026 ,113.668716 ,113.203796 ,112.780815 ,112.247322 ,111.618790 ,111.024063 ,110.472954 ,109.995255 ,109.560104 ,109.130417 ,108.638504 ,108.162140 ,107.807106 ,107.370087 ,106.924034 ,106.576057 ,106.204041 ,105.863937 ,105.441841 ,104.994545 ,104.599632 ,104.188271 ,104.077850 ,104.124527 ,103.976196 ,103.830284 ,103.461838 ,102.983688 ,102.547737 ,102.038658 ,101.437759 ,100.955673 ,100.464645 ,99.996780 ,99.530342 ,99.090553 ,98.627151 ,98.215698 ,97.816414 ,97.484268 ,97.172775 ,96.795296 ,96.492477 ,96.062874 ,95.728851 ,95.412437 ,95.023788 ,94.987038 ,95.168007 ,95.283516 ,95.098526 ,94.795792 ,94.440491 ,94.105751 ,93.798820 ,93.336136 ,92.851280 ,92.522537 ,92.121902 ,91.712059 ,91.362122 ,90.882629 ,90.467163 ,89.933578 ,89.528481 ,89.072235 ,88.648170 ,88.240570 ,87.819908 ,87.552765 ,87.292145 ,86.978142 ,86.622749 ,86.658157 ,86.924232 ,87.213997 ,87.058434 ,86.848587 ,86.780289 ,86.544701 ,86.302132 ,85.922157 ,85.545837 ,85.076813 ,84.735008 ,84.301025 ,83.877510 ,83.515327 ,83.069008 ,82.702698 ,82.340607 ,81.997818 ,81.498123 ,81.162750 ,80.941917 ,80.532440 ,80.288094 ,79.886826 ,79.536621 ,79.502464 ,79.724823 ,79.975517 ,80.017632 ,79.945213 ,79.733139 ,79.566299 ,79.286552 ,79.029594 ,78.634415 ,78.214561 ,77.867844 ,77.511909 ,77.166267 ,76.820801 ,76.507782 ,76.077110 ,75.829987 ,75.411118 ,75.086838 ,74.744850 ,74.459648 ,74.144394 ,73.737328 ,73.444427 ,73.182648 ,72.969498 ,73.158417 ,73.482788 ,73.435310 ,73.322922 ,73.156006 ,72.983719 ,72.731049 ,72.445663 ,72.031357 ,71.762512 ,71.393791 ,71.154449 ,70.860748 ,70.576256 ,70.237312 ,69.970520 ,69.650360 ,69.316872 ,69.033897 ,68.826561 ,68.551453 ,68.227982 ,68.018410 ,67.632172 ,67.342407 ,67.366455 ,67.501640 ,67.453720 ,67.287598 ,67.084648 ,66.784508 ,66.500549 ,66.251373 ,65.887573 ,65.525749 ,65.194580 ,64.933426 ,64.619072 ,64.213074 ,63.964428 ,63.636040 ,63.337776 ,63.006699 ,62.739193 ,62.387020 ,62.080269 ,61.751965 ,61.445835 ,61.173862 ,61.121647 ,61.027145 ,60.840820 ,60.627850 ,60.422394 ,60.145676 ,59.852245 ,59.619965 ,59.231670 ,58.918659 ,58.627636 ,58.389904 ,58.019585 ,57.719444 ,57.481174 ,57.238701 ,56.994621 ,56.719067 ,56.338909 ,56.048515 ,55.784321 ,55.461468 ,55.168751 ,54.855560 ,54.608440 ,54.533157 ,54.464134 ,54.259838 ,53.991440 ,53.722504 ,53.415035 ,53.131611 ,52.805996 ,52.493603 ,52.186401 ,51.878666 ,51.608116 ,51.238510 ,50.960812 ,50.711185 ,50.365452 ,50.097229 ,49.820961 ,49.535847 ,49.235439 ,49.029533 ,48.717236 ,48.408871 ,48.148693 ,47.898354 ,47.577652 ,47.453644 ,47.413498 ,47.191235 ,46.954395 ,46.713978 ,46.514332 ,46.210438 ,45.946957 ,45.669979 ,45.355442 ,45.122093 ,44.886948 ,44.559185 ,44.304729 ,44.049477 ,43.747097 ,43.562744 ,43.266270 ,42.998051 ,42.673946 ,42.529644 ,42.217438 ,41.953861 ,41.712467 ,41.462036 ,41.222694 ,40.919785 ,40.635380 ,40.620449 ,40.500286 ,40.369392 ,40.124237 ,39.950073 ,39.738895 ,39.494186 ,39.315643 ,39.058064 ,38.791359 ,38.595112 ,38.368374 ,38.169357 ,37.963989 ,37.720444 ,37.488163 ,37.303986 ,37.179443 ,36.929192 ,36.755741 ,36.550465 ,36.310226 ,36.106380 ,35.881699 ,35.725060 ,35.514416 ,35.299572 ,35.151245 ,35.024288 ,34.967247 ,34.887318 ,34.774662 ,34.615875 ,34.440731 ,34.286770 ,34.097317 ,33.928696 ,33.673435 ,33.507496 ,33.359440 ,33.178303 ,32.995731 ,32.812626 ,32.627914 ,32.504799 ,32.361927 ,32.186779 ,31.976315 ,31.774702 ,31.600090 ,31.540991 ,31.339111 ,31.152966 ,31.017515 ,30.828060 ,30.811968 ,30.777905 ,30.635300 ,30.535879 ,30.383617 ,30.233236 ,30.059429 ,29.896351 ,29.724600 ,29.592278 ,29.407383 ,29.240372 ,29.097054 ,28.871389 ,28.441879 ,27.917505 ,27.169170 ,26.339561 ,25.366903 ,24.483114 ,23.585293 ,22.695066 ,21.878780 ,21.155388 ,20.477148 ,19.807041 ,19.184769 ,18.578590 ,17.972233 ,17.420681 ,16.924561 ,16.426832 ,15.925080 ,15.463293 ,15.046031 ,14.594705 ,14.222772 ,13.826788 ,13.424278 ,13.136209 ,12.797982 ,12.435169 ,12.110353 ,11.796714 ,11.556388 ,11.282355 ,10.982126 ,10.725618 ,10.505856 ,10.219933 ,9.950639 ,9.673923 ,9.457023 ,9.203732 ,8.963764 ,8.803994 ,8.623213 ,8.370012 ,8.202106 ,8.010954 ,7.830263 ,7.701159 ,7.499188 ,7.321179 ,7.161588 ,7.026762 ,6.870657 ,6.691486 ,6.583661 ,6.429523 ,6.298006 ,6.182313 ,5.997151 ,5.956203 ,5.837024 ,5.724192 ,5.617261 ,5.505234 ,5.396426 ,5.270362 ,5.212873 ,5.114168 ,5.016804 ,4.916490 ,4.794002 ,4.728377 ,4.667133 ,4.549474 ,4.468471 ,4.409284 ,4.287065 ,4.230738 ,4.173428 ,4.140884 ,4.075617 ,4.013568 ,3.930062 ,3.827513 ,3.765106 ,3.692508 ,3.671050 ,3.595859 ,3.499925 ,3.443063 ,3.388435 ,3.361434 ,3.271580 ,3.225178 ,3.206492 ,3.127635 ,3.063888 ,3.045917 ,3.181994 ,3.286064 ,3.493935 ,3.727734 ,3.827960 ,3.886253 ,4.004091 ,4.198730 ,4.418403 ,4.674018 ,4.825116 ,4.933566 ,5.033344 ,4.989803 ,4.911483 ,4.841388 ,4.677147 ,4.489661 ,4.327655 ,4.099578 ,3.979862 ,3.896445 ,3.811419 ,3.700644 ,3.647626 ,3.625542 ,3.572256 ,3.473282 ,3.490448 ,3.357142 ,3.256202 ,3.077835 ,3.001213 ,2.973497 ,2.950430 ,2.928794 ,2.933175 ,2.902329 ,2.890617 ,2.867639 ,2.839297 ,2.753824 ,2.727539 ,2.655924 ,2.660662 ,2.547831 ,2.521456 ,2.474517 ,2.406568 ,2.372951 ,2.294451 ,2.289444 ,2.246976 ,2.210319 ,2.149076 ,2.117068 ,2.051533 ,2.041340 ,2.018184 ,2.042055 ,1.910895 ,1.920819 ,1.874060 ,1.838923 ,1.805395 ,1.818717 ,1.771420 ,1.736015 ,1.707941 ,1.707941 ,1.677364 ,1.670122 ,1.623720 ,1.590103 ,1.577854 ,1.559079 ,1.485050 ,1.449108 ,1.434088 ,1.428098
]
data = pd.DataFrame (vals,columns=['Values'])

plt.title("Inflation and Deflation Curve")
plt.xlabel("Samples")
plt.ylabel("Pressure in mmHg")
plt.plot(data);

deflation_data = data[150:600] # Considering data points pertaining to the deflation curve
plt.xlabel("Samples")
plt.ylabel("Pressure in mmHg")
plt.title("Deflation Curve")
plt.plot(deflation_data);

"""## Passing the Deflation Curve through a Band Pass Filter"""

fs = 1/0.026  # Number of reading per second
frequency  = np.array([0.9,1.7]) # Frequency of the signal
wc = 2*frequency/fs  # Normalised frequency
offset = data[150:600] # Data points relevant to the 'Deflation Curve'
b, a = signal.butter(5, wc, btype = 'bandpass', analog=False) # Applying BandPass filter from scipy
#print(b,a)

filtered_correct = signal.filtfilt(b,a, offset,axis = 0) # Fitting the values to the BandPass filter
offset = offset.values.tolist() 
pdata = []

for i in offset:
    pdata.append(i[0])

difference = [] # Storing difference b/w two samples
xaxis = [] 
maxim = -1000000
for i in range(len(filtered_correct)-1):
    if maxim < abs(filtered_correct[i+1] - filtered_correct[i]):
        maxim = abs(filtered_correct[i+1] - filtered_correct[i])
        max_index = i
    difference.append(filtered_correct[i+1] - filtered_correct[i])  
    xaxis.append(filtered_correct[i])
    
data_values = data.values.tolist()
pdata = []
for i in data_values:
    pdata.append(i[0])

plt.xlabel("Samples")
plt.ylabel("Pressure Deviation")
plt.title("Band Pass Filtered Graph for the Deflation Curve")
plt.plot(list(range(len(offset))), filtered_correct);

print(f"The peak is at {max_index}") 
print(filtered_correct[max_index])

"""### Finding the Systolic and the Diastolic Blood Pressure"""

systolic_index = np.argmax(filtered_correct > np.max(filtered_correct)*.5)  # Index for the systolic pressure value
diastolic_index = np.flatnonzero(filtered_correct > np.max(filtered_correct)*0.8)[-1] # Index for the diastolic pressure value

systolic = offset[systolic_index]
diastolic = offset[diastolic_index]
print("Systolic Index",systolic_index)
print("Diastolic Index",diastolic_index)

print(f"The systolic pressure is : {systolic}.")
print(f"The diastolic pressure is : {diastolic}.")

"""## Calculating the Heart Rate and Frequency"""

plt.figure(figsize = (15,12))
plt.xlabel("Samples")
plt.ylabel("Pressure Deviation")
plt.title("Band Pass Filtered Graph for the Deflation Curve")
plt.plot(list(range(len(offset))), filtered_correct);
plt.xticks(range(0 , len(offset) , 10) , rotation = 90)
print(maxim,max_index) # Index of the peak

"""#### Finding the number of samples between two consecutive peaks in order to calulate the heart rate and the frequency"""

df = pd.DataFrame()
df['sample'] = range(len(offset))
df['pressure'] = filtered_correct

df['right'] = df['pressure'].shift(1)
df['left'] = df['pressure'].shift(-1)

df['peak'] = df.apply(lambda x: 1 if (x['pressure']>= x['left']) &(x['pressure']>= x['right']) else 0 , axis = 1 )

df.query("peak == 1").sort_values(by = ['pressure'] , ascending = False)

"""### As we can see from the table above, the two highest consecutive peaks occur at 229 and 202. Their difference will us the number of samples between those peaks, i.e. 229 - 202 = 27"""

samples_between_consecutive_peaks = 27
time_in_mills = 0.026
time_period = time_in_mills * samples_between_consecutive_peaks
frequency = 1/time_period
heart_rate = frequency * 60
print(f"The Heart Rate is {heart_rate}. \nThe Frequency is {frequency}")